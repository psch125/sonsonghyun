2-1)
프로젝트>>현실 세계를 컴퓨터 시스템으로 옮겨놓는 일련의 과정
폭포수 모델>>소프트웨어 개발 단계 중 하나로, 이름 그대로 폭포가 떨어지듯
개발 단계까 진행된다.
데이터베이스 모델링>>현실 세계에서 사용되는 작업물이나 사물들을
DBMS(DataBase Management System)의 테이블로 옮기기 위한 과정.
데이터 > 단편적인 정보
테이블 > 데이터를 입력하기 위한 표 형태
데이터베이스 > 데이터의 저장소
데이터베이스 관리 시스템 > 데이터 베이스를 관리하는 시스템 또는 소프트웨어(MySQL)
열 > 테이블의 세로 / 테이블은 여러 개의 열로 구성됨
열 이름 > 각 열을 구분하기 위한 이름
데이터 형식 > 열에 저장될 데이터의 형식(숫자/문자/날짜등)
행 > 테이블의 가로 / 실질적인 진짜 데이터
기본키 > 각 행을 구분하는 유일한 열 (ID,학번,주민번호등 이런열은 하나여야함)
SQL > 사람과 DBMS 가 소통하기 위한 말
2-2)
데이터 베이스 구축 절차
데이터 베이스 만들기 > 테이블 만들기 > 데이터 입력/수정/삭제하기 > 데이터 조회/활용

SELECT 의 기본 형식
>> SELECT 열_이름 FROM 테이블_이름 [WHERE 조건] 이고 *는 모든 열을 의미한다.

>> SELECT member_name, member_addr FROM member;
이름과 주소만 따로 분리해서 보여준다

>> SELECT * FROM member WHERE member_name = '아이유' ;
아이유의 정보만 추출

2-3)
데이터베이스 개체인 것 > 테이블, 인덱스, 뷰, 스토어드 프로시저, 트리거, 함수, 커서
인덱스 >> 일반 책의 '찾아보기'와 비슷한 개념
뷰 >> '바로 가기 아이콘' 과 비슷한 개념
스토어드 프로시저 >> 여러개의 sql을 묶어주거나, 프로그래밍 기능을 제공해준다

용어 정리)
데이터 베이스 개체 > 테이블, 뷰, 인덱스, 스토어드 프로시저 등 데이터 베이스 안에 저장되는 개체
실행 계획 > Execution Plan > sql을 실행할 때, 인덱스 사용 여부를 확인할 수 있는 워크벤치의 화면
전체 테이블 검색 > Full Table Scan > 테이블의 모든 데이터를 훑어서 원하는 데이터를 찾아내는 것을 말함.
		책 전체를 찾아보는 것과 비슷함
인덱스 검색 > Index Scan > 인덱스를 통해서 데이터를 찾는 것을 말함.
		           책 뒤의 찾아보기를 사용한 것과 비슷함
구분 문자 > DELIMITER > 스토어드 프로시저를 묶어주는 약어
호출 > CALL > 스토어드 프로시저를 호출하는 예약어
개체 생성문 > CREATE > 데이터베이스 개체를 생성할 때 사용하는 예약어
개체 삭제문 > DROP > 데이터베이스 개체를 삭제할 때 사용하는 예약어

3-1)
<SELECT문 기본 구조>
>> SELECT (열 이름) FROM (TABLE 이름) WHERE (조건식)

<혼공 예제코드 풀이>
1. 데이터베이스 만들기
DROP DATABASE IF EXISTS market_db(db이름);
>> 기존의 market_db를 삭제하는 문장 
CREATE DATABASE market_db;
>> 데이터베이스를 새로 만든다

2. 회원 테이블 만들기
USE market_db;
>> USE문은 market_db 데이터베이스를 선택하는 문장
MYSQL Workbench의 [SCHEMAS] 패널에서 shop_db 데이터베이스를 더블 클릭해서 선택하는 것과 같음

*AUTO_INCREMENT >> 자동으로 숫자를 입력해준다. 순번을 직접 입력할 필요없이 1,2,3,4...로 증가

3. 데이터 입력하기
INSERT문 사용
EX) INSERT INTO member_values('TWC', '트와이스', 9, '서울', '02', '11111111', 167, '2015.10.19');

4. 데이터 조회하기
SELECT * FROM member;
SELECT * FROM buy;

<구문 기본 구조>
USE문 
>> USE 데이터베이스_이름;
>> USE market_db;

특정한 조건만 조회하기
>> SELECT 열_이름 FROM 테이블_이름 WHERE 조건식
>> SELECT 열_이름
	FROM 테이블_이름
	WHERE 조건식;
(;) 세미클론 전까지는 전부 한 줄로 보기 때문에 이렇게 쓰면 가독성이 높음

관계 연산자, 논리연산자 사용 가능 (AND,OR / > < >= <= = )

범위가 있는 값을 구하는 경우
BETWEEN ~ AND 사용
EX) WHERE height >= 163 AND height <= 165;
>> WHERE height BETWEEN 163 AND 165;

주소 같이 문자로 표현되는 데이터 /  범위 지정이 안되는 경우
IN() 사용 
EX) SELECT mem_name, addr
	FROM member
	WHERE addr = '경기' OR addr = '전남' OR addr='경남';

>>SELECT mem_name, addr
	FROM member
	WHERE addr IN('경기', '전남', '경남');

문자열의 일부 글자를 검색하려면 LIKE 사용
이 조건은 제일 앞글자가 '우'이고 그뒤는 무엇이든(%) 허용한다
EX) SELECT *
	FROM member
	WHERE mem_name LIKE '우%';

한 글자와 매치하기 위해서는 언더바(_)를 사용한다
EX) SELECT *
	FROM member
	WHERE mem_name LIKE '_ _ 핑크';
_ _ 언더바의 갯수만큼의 글자에는 무엇이 들어가든 상관없음

서브쿼리
SELECT 안에 다른 SELECT 문이 들어가는 경우
2개의 SELECT 문을 쓰는 것보다 가독성이 좋고 관리가 편함
EX)
SELECT height FROM member WHERE mem_name = '에이핑크'
SELECT mem_name, height FROM member WHERE height > 164;

합친거) SELECT mem_name, height FROM member WHERE hegiht >
	(SELECT height FROM member WHERE mem_name = '에이핑크');

3-2)

GROUP BY > 지정한 열의 데이터들을 같은 데이터끼리는 묶어서 결과를 추출
>> 주로 그룹으로 묶는 경우에는 합계,평균,개수 등을 처리할 때 사용
HAVING > GROUP BY의 짝 > 조건식 추가하는 용도 (WHERE 하고 구분 / HAVING은 GROUP BY만)
ORDER BY > 결과의 정렬을 위해 사용
LIMIT > 결과의 개수를 제한
DISTINCT > 중복된 데이터를 제거

<ORDER BY 절>
*기본형식*
SELECT 열_이름
	FROM 테이블_이름
	WHERE 조건식
	GROUP BY 열_이름
	HAVING 조건식
	ORDER BY 열_이름
	LIMIT 숫자
>> 결과가 출력되는 순서를 조정
EX) ORDER BY debut_date;
오름차순이 기본 베이스
내림차순을 사용하려면 DESC를 붙여주면 됨
**순서도 중요 위에 있는 순서를 지켜줘야지 오류가 발생 안함**

<LIMIT 절>
출력하는 개수를 제한한다

LIMIT 시작,개수 > LIMIT 3만 쓰면 LIMIT 0,3과 동일하다
	  
중간부터 출력도 가능하다
EX) LIMIT 3,2; 이면 3번째부터 2건이 조회된다

<DISTINCT 절>
조회된 결과에서 중복된 데이터를 1개만 남기고 제거한다
EX) SELECT DISTINCT addr FROM member;
>> 열_이름 앞에 DISTINCT 만 붙여주면 됨

<GROUP BY 절>
GROUP BY 절은 그룹으로 묶어주는 역할을 한다

집계함수  > GROUP BY 절과 함께 쓰이며 데이터를 그룹화 해주는 기능을 한다(연산)
SUM() > 합계를 구한다
AVG() > 평균을 구한다
MIN() > 최소값을 구한다
MAX() > 최대값을 구한다
COUNT() > 행의 개수를 세준다
COUNT(DISTINCT) > 행의 개수를 센다 (중복은 1개만 인정)

<HAVING 절>
집계함수에 대해서 조건을 제한해준다
HAVING 절은 꼭 GROUP BY 절 뒤에 나와야 한다

3-3) 데이터 변경
데이터 입력 > INSERT
기본문법 
INSERT INTO 테이블 [(열1, 열2, ...)] VALUES (값1, 값2, ...)

EX) 
USE market_db
CREATE TABLE hongong1 (toy_id INT, toy_name CHAR(4), age INT);
INSERT INTO hongong1 VALUES (1, '우디', 25);

혹시 toy_id, toy_name 만 입력하고 age는 입력하고 싶지 않다면 table 이름 뒤에 입력할 열의 이름을 써줘야 한다
이 경우 생략한 age 열에는 아무것도 없다는 의미의 NULL 값이 들어가야 한다.

데이터 수정 > UPDATE
기본문법
UPDATE 테이블_이름
	SET 열1=값1, 열2=값2, ...
	WHERE 조건문 ;

데이터 삭제 > DELETE
	DELETE FROM 테이블이름 WHERE 조건 ;

5-1) 테이블 만들기

테이블은 표형태로 구성된 2차원 구조 >>  가로열 세로형
테이블을 만들기 전에는 테이블 이름, 열 이름, 데이터 형식, 기본키 등을 설계하고 하는 것이 좋다

테이블 생성 코드
<member table>
DROP TABLE IF EXISTS member;  -- 기존에 있으면 삭제
CREATE TABLE member
( mem_id CHAR(8) NOT NULL PRIMARY KEY, -- 기본키 설정
mem_name VARCHAR(10) NOT NULL,
mem_number TINYINT NOT NULL,
addr CHAR(2) NOT NULL,
phone1 CHAR(3) NOT NULL,
phone2 CHAR(8) NULL,
height TINYINT UNSIGNED NULL,
debute_date DATE NULLL
);

<buy table>
DROP TABLE IF EXISTS buy; -- 기존에 있으면 삭제
CREATE TABLE buy -- 구매 테이블
( num INT AUTO_INCREMENT NOT NULL PRIMARY KET, --- 순번 (PK) > AUTO_INCREMENT 자동으로 순번 오름차순으로 올라감
mem_id CHAR(8) NOT NULL, -- 아이디 (FK)
prod_name CHAR(6) NOT NULL, -- 제품 이름
group_name CHAR(4) NULL, -- 분류
price INT UNSIGNED NOT NULL, -- 가격
amount SMALLINT UNSIGNED NOT NULL -- 수량
FOREIGN KEY(mem_id) REFERENCES member(mem_id) --> 외래키 추가 코드
);

관련용어
UNSIGNED > 정수형 뒤에 붙이면 0부터 양의 정수만 입력 됨
백틱(`) > 키보드 1 바로 왼쪽에 있는 키로, 테이블 이름이나 열 이름을 묶을 때 사용
NULL > 열에 비어 있는 값을 허용할 때 설정함 ( 별도로 지정하지 않으면 기본은 NULL)
키본키 - 외래키 > 두 테이블이 일대다로 연결되는 관계
주석 >> 하이픈(-) 2개 이후 한칸 띄고 설명을 써야함

5-2) 제약조건으로 테이블을 견고하게 
테이블을 만들 때는 테이블의 구조에 필요한 제약조건을 설정해줘야 한다
기본키 > 학번,이름,사번 등과 같은 고유한 번호를 의미하는 열에 설정
외래키 > 기본키와 연결되는 열에 지정
고유키 > 이메일,휴대폰과 같이 중복되지 않는 열에는 고유키 지정 가능
체크 > 회원의 평균키는 200을 넘지 않을 것 ( 평균이 200넘기 힘듬) 
이 때 실수로 200을 입력하는 것을 방지하는 제약조건이 체크
기본값 > Default값
NOT NULL > 값을 꼭 입력해야 하는 제약조건

제약조건은 데이터의 무결성을 지키기 위한 조건
데이터 무결성이란 '데이터에 결함이 없음'이라는 의미
예를 들어, 네이버 회원의 아이디가 중복되면 이메일, 블로그, 쇼핑 기록등 상당한 혼란이 일어남
> 이런 것을 데이터의 결함이라 하고, 이런 결함이 없는 것을 데이터 무결성이라고 표현 함

제약 조건 목록)
1. PRIMARY KEY
2. FOREIGN KEY
3. UNIQUE
4. CHECK
5. DEFAULT 
6 NULL

PRIMARY KEY > 기본키
CREATE TABLE 에서 기본 키를 지정하는 방법은 제일 마지막 행에 PRIMARY KEY(mem_id)를 추가하는 것

ALTER TABLE에서 기본키 제약 조건
기본 구조)
ALTER TABLE member -- member를 변경한다
	ADD CONSTRAINT -- 제약 조건을 추가한다
	PRIMARY KEY (mem_id); -- mem_id ㅔ열에 기본키 제약조건을 설정한다

FOREIGN KEY > 외래 키 제약조건
외래키 제약조건은 두 테이블 사이에 관계를 연결해주고, 그 결과 데이터의 무결성을 보장 해주는 역할을 한다.
외래 키가 설정된 열은 꼭 다른 테이블의 기본 키와 연결된다
기준 테이블 > 기본 키가 있는 회원 테이블
참조 테이블 > 외래 키가 있는 회원 테이블

ALTER TABLE에서 외래 키 제약 조건
기본 구조)
ALTER TABLE buy --buy를 수정한다
	ADD CONSTRAINT -- 제약 조건을 추가한다
	FOREIGN KEY(mem_id) --외래 키 제약조건을 buy테이블의 mem_id에 설정한다
	REFERENCES member(mem_id); --참조할 기준 테이블은 member 테이블의 mem_id열이다
** 기본 키-외래 키로 맺어진 후에는 기준 테이블의 열 이름이 변경되지 않는다. 
열이름이 변경되면 참조 테이블의 데이터에 문제가 발생하기 때문이다(변경 + 삭제도 안 됨)

기준 테이블의 열 이름이 변경될 때 참조 테이블의 열 이름이 자동으로 변경되면 더 효율적일 것 같다.
즉, 회원 테이블의 BLK 가 PINK로 변경되면 자동으로 구매 테이블의 BLK도 PINK로 변경되는 것이다. 
이럴 때 사용하는 기능이 'ON UPDATE CASCADE' 문 이다

삭제하는 것은 'ON DELETE CASCADE' 문이다

기타 제약 조건

고유키 제약조건(UNIQUE) > '중복되지 않는 유일한 값'을 입력해야 하는 조건이다
기본 키와 비슷하지만, 차이점은 고유키 제약조건은 NULL 값을 허용한다
그리고 고유키는 여러 개를 설정해도 된다

체크 제약조건(CHECK) > 체크 제약 조건은 입력되는 데이터를 점검하는 기능을 합니다
예를 들어, 평균키 (height)에 마이너스 값이 입력되지 않도록 하거나, 연락처의 국번에 02 031 041 055중 
하나만 입력되도록 할 수 있다.
열의 정의 뒤에 CHECK(조건)을 추가해주면 됩니다
ex code)
height TINYINT UNSIGNED NULL CHECK (height >= 100)

기본값 정의는 값을 입력하지 않았을 때 자동응로 입력될 값을 미리 지정해 놓는 방법
ex) 
height TINYINT UNSIGNED NULL DEFAULT 160

5-3)VIEW
모든 데이터베이스 개체는 테이블과 관련이 있지만, 특히 뷰는 테이블에 직접 접근하므로 밀접하게 연관된다

뷰를 한마디로 표현하면 '가상의 테이블', '바로가기' 정도로 표현 가능 / 뷰의 실체는 SELECT문으로 구성되어 있다

하나의 테이블과 관련되면 단순 뷰 , 2개 이상의 테이블과 관련되면 복합 뷰라고 부른다.
복합 뷰로는 테이블의 데이터를 수정할 수 없다.

뷰는 특정사용자가 테이블에 접근하지 못하도록 하고, 필요한 부분에서만 접근하도록 함으로써 보안에 도움이 된다

기본 코드)
CREATE VIEW -- 뷰를 생성하는 SQL
별칭 -- 뷰에서 사용될 열의 이름을 별칭을 사용해서 테이블과 다르게 지정 가능 
테이블이름이 member 이면 별칭은 보통 v_member 라고 설정함
백틱(`) -- 뷰를 조회할 때 열 이름에 공백이 있으면 붙여주는 기호
ALTER VIEW > 뷰를 수정하는 SQL
DROP VIEW > 뷰를 삭제하는 SQL
CREATE OR REPLACE VIEW > 기존에 뷰가 있으면 덮어쓰고, 없으면 새로 생성하는 SQL
DESCRIBE > 뷰 또는 테이블의 정보를 조회하는 SQL
SHOW CREATE VIEW > 뷰의 소스 코드를 보여주는 SQL
WITH CHECK OPTION > 뷰에 설정된 조건만 입력되도록 지정하는 SQL
CHECK TABLE > 뷰 또는 테이블의 상태를 확인하는 SQL


















































